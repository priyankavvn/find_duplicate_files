#!/usr/bin/env python3 
# -*- coding: utf-8 -*-
"""
Date: 26 June 2019

@author: V V N Priyanka

Usage:
	find-duplicate-files.py [-h] db

Description:
	Find duplicate files within the db

Input:
	db
	This is mandatory argument. SQLite3 db. 
Output:
	log file in outdir

"""

import os
import re
import sys
import time		
import getopt		
import sqlite3		
import datetime

OUT_DIR_PREFIX = "out_dir_"

db = ""
log_file = "log.txt"
log_fd = ''

# Every sqlite db contains the following string as first 16 characters. (\x00 is null byte)
SQLite_MAGIC_STRING = b"SQLite format 3\x00"

########################################################
# Print the string to stdout and write to log.txt file #
########################################################
def print_and_log(*s):
  global log_fd
  for i in s:
    print(i,end='')
    log_fd.write(str(i))
  print("")
  log_fd.write("\n")

########################################################
# Print the string to stdout and write to log.txt file #
# Same as print_and_log, except that it will print a   #
# new line after all args are printed. This will avoid #
# passing "\n" for every print_and_log call            #
########################################################
def print_and_log_n(*s):
  global log_fd
  for i in s:
    print(i, end='', sep='')
    log_fd.write(str(i))	
  print("")
  log_fd.write("\n")

########################################################################################################
# Check whether a given file a SQL Database file                                                       #
# A SQL Database file starts with the 16-byte string: "SQLite format 3\x00" (here \x00 is a null byte) #
########################################################################################################
def check_sql_db(dbfile):
  f = open(dbfile, "rb")
  magic = f.read(16)
  if (magic == SQLite_MAGIC_STRING):
    return True
  else:
    return False

#################  
# Display Usage #
#################
def usage():
    print("Usage: " + os.path.basename(sys.argv[0]) + " [-h] <sqlite3 db>")
    sys.exit(2)		

############################
# Get command line options #
############################
def get_opts():
    global db
    try:
        opts, args = getopt.getopt(sys.argv[1:], "h", [])
    except getopt.GetoptError as err:
        # print help information and exit:"
        print(err)  # will print something like "option -a not recognized"
        usage()
		
    for o, a in opts:
        if o == "-h":
            if (len(args)):
              print_and_log_n("Since -h option is given, ignoring all other arguments: ", args)
            usage()
        else:
            assert False, "unhandled option"
    
    if len(args) == 0:
      print_and_log_n("SQLite3 database file not specified")
      usage()

    db = args[0]

    if not os.path.isfile(db):
      print_and_log_n("Not a file: ",db)
      usage()

    if not check_sql_db(db):
      print_and_log_n("Not an sqlite3 database file: ", db)
      usage()

#################################
# Duplicate files within db #
#################################
def dup_files_in_db():
# Duplicate files within the new db (without any comparision to the reference dbs
# Note: Other three files have identical format. But this file has slightly different format
#	1. There is a blank line after each group of duplicate files
#	2. SHA256 and Path are separated by a space instead of "|"
#	   This can be easily modified by replacing char(32) by "|" in the following sql statement:
#	   	SELECT GROUP_CONCAT (sha256||char(32)||path,char(10))||char(10)
#	   as:
#		SELECT GROUP_CONCAT (sha256||"|"||path,char(10))||char(10)
#	   Replaced 'space' by "|" to make the file formats as close as possible.
#	   Blank lines are still present between groups 
  
  print_and_log_n("Duplicate files in '", db, "':")
  print_and_log_n("(File generated by '", sys.argv[0], "')")
  print_and_log_n("(Date/time of generation: ",datetime.datetime.now().isoformat(), ")\n")
  sql_stmt = '''SELECT GROUP_CONCAT (sha256||"|"||path,char(10))||char(10) 
		FROM db.hash_table
		GROUP BY sha256 
		HAVING COUNT(*) > 1 
		ORDER BY sha256; '''

  cur.execute(sql_stmt)

  count = 0

  row = cur.fetchone()
  while row:
    count = count + 1
    line = row[0]
    print_and_log(line)
    row = cur.fetchone()

  print_and_log_n("Number of duplicate file groups found: ", count)

########
# Main #
########
# Keep all output files in a sigle dir, instead of creating in the current directory
# The name of the output dir is generated by concatening the OUT_DIR_PREFIX with time.time()
# A sample output of time.time() is "1559930379.3724217" (float)
# So a sample output dir name is: out_dir_1559930379.3724217
# The default mode of out dir is 777
out_dir = OUT_DIR_PREFIX + str(time.time())
os.mkdir(out_dir)

log_fd = open (os.path.join(out_dir,log_file), "w")

get_opts()

con = sqlite3.connect("")
cur = con.cursor()

# Attach the new db
cur.execute("ATTACH " + '"' + db + '"' + " AS db;")

dup_files_in_db()


